# -*- coding: utf-8 -*-
#
# Recommonmark documentation build configuration file, created by
# sphinx-quickstart on Tue Jul 28 11:17:27 2015.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os
import shlex

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath('..'))
import recommonmark
from recommonmark.transform import AutoStructify

html_sidebars = { '**': ['globaltoc.html', 'relations.html', 'sourcelink.html', 'searchbox.html'] }

source_suffix = ['.rst', '.md']

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.napoleon',
    'sphinx.ext.mathjax',
    'recommonmark',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Cirrent Support Docs'
copyright = u'Â®2020 Cirrent. All rights reserved.'
author = u'Tahir Mushtaq'

#github_doc_root = 'https://github.com/rtfd/recommonmark/tree/master/docs/'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = recommonmark.__version__
# The full version, including alpha/beta/rc tagss
release = recommonmark.__version__

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ['_build']

# The reST default role (used for this markup: `text`) to use for all
# documents.
default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'
#html_search_language = 'en'

# A dictionary with options for the search language support, empty by default.
# Now only 'ja' uses this config value
#html_search_options = {'type': 'default'}

# The name of a javascript file (relative to the configuration directory) that
# implements a search results scorer. If empty, the default will be used.
#html_search_scorer = 'scorer.js'

# Output file base name for HTML help builder.
htmlhelp_basename = 'Recommonmarkdoc'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',

# Latex figure (float) alignment
#'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  (master_doc, 'Recommonmark.tex', u'Recommonmark Documentation',
   u'Lu Zero, Eric Holscher, and contributors', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'recommonmark', u'Recommonmark Documentation',
     [author], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  (master_doc, 'Recommonmark', u'Recommonmark Documentation',
   author, 'Recommonmark', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

html_static_path = ['_static']
html_theme_path = ['_themes']

html_logo = '_static/image/IFX_ICON.png'

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = '_static/image/IFX_ICON.ico'

# app setup hook
def setup(app):
    app.add_config_value('recommonmark_config', {
        #'url_resolver': lambda url: github_doc_root + url,
        'auto_toc_tree_section': 'Contents',
        'enable_math': False,
        'enable_inline_math': False,
        'enable_eval_rst': True,
        'enable_auto_doc_ref': True,
    }, True)
    app.add_transform(AutoStructify)
    app.add_css_file('https://cdnjs.cloudflare.com/ajax/libs/bootswatch/4.1.1/flatly/bootstrap.min.css')
    app.add_css_file('css/theme_overrides.css')
    app.add_css_file('css/cookie_style.css')
    app.add_js_file('js/searchtools.js')
    app.add_js_file('js/custom.js')
    app.add_js_file('js/cookies_script.js')

html_js_files = [('https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js', {'crossorigin': 'anonymous'}),
             ('https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js', {'crossorigin': 'anonymous'})]


htmlNamesForXmlString='{"row":"tr","entry":"td", "para":"p", "listitem":"li", "orderedlist":"ol", "itemizedlist":"ul", "ulink":"a", "ref":"a", "linebreak":"br", "bold":"b","emphasis":"i","image":"img"}'
htmlNamesForXml = json.loads(htmlNamesForXmlString)
totalDirectiveList=['seealso', 'attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip', 'warning', 'admonition', 'pre']
for (k, filePath) in breathe_projects.items():
  files = os.listdir(filePath)
  for nameOfFile in files:
    if nameOfFile.endswith(".xml"):
#      print(filePath)
      fileName=filePath+nameOfFile
      tempfilename=filePath+'temp'+nameOfFile
#      print(fileName)
#      print(path.exists(fileName))
      ulinkArray=[]
      titleArray=[]
      if path.exists(fileName):
        with open(fileName, encoding='UTF-8') as f:
          tree = ET.parse(f)
          root = tree.getroot()
          
#          print(ET.tostring(root, encoding='utf8').decode('utf8'))
          for elem in root.getiterator():
            if ((elem.tag == 'compounddef' or elem.tag == 'compound') and elem.attrib['kind']!=None and elem.attrib['kind'] == 'page'):
              elem.attrib['kind'] = 'group'
            try:
                                
              if elem.tag == 'image':
                if elem.attrib['type']!= None and elem.attrib['type'] == 'latex':
                  elem.attrib.pop('type')
                  elem.attrib.pop('name')
                  elem.tag = elem.tag.replace(elem.tag,'removeimage')
                  
              if 'memberdef' == elem.tag and elem.attrib['kind'] == 'enum':
                nameElem = elem.find('name')
                briefDescElem = elem.find('briefdescription')
                if(briefDescElem!=None):
                  nameText = str(nameElem.text).strip()
                  paraElem = briefDescElem.find("para")
                  paraElemString = ET.tostring(paraElem, encoding='utf8').decode('utf8')
                  paraElemString = paraElemString.replace("<?xml version='1.0' encoding='utf8'?>","")
                  paraElemString = paraElemString.replace("<para>", "").replace("</para>", "").strip()
                  
                  if not paraElemString.startswith("<bold>"+nameText):
                    paraElemString = "<para><bold>"+nameText+": </bold><linebreak/>"+paraElemString+"</para>"
                  else:
                    paraElemString = "<para>"+paraElemString+"</para>"
                
                  briefDescElem.remove(paraElem)
                  briefDescElem.append(ET.fromstring(paraElemString))
              
              
#              if 'memberdef' == elem.tag and elem.attrib['kind'] == 'define':
#                nameElem = elem.find('name')
#                initElem = elem.find('initializer')
#                briefDescElem = elem.find('briefdescription')
#                if(briefDescElem!=None):
#                  nameText = str(nameElem.text).strip()
#                  paraElem = briefDescElem.find("para")
#                  paraElemString = ET.tostring(paraElem, encoding='utf8').decode('utf8')
#                  paraElemString = paraElemString.replace("<?xml version='1.0' encoding='utf8'?>","")
#                  paraElemString = paraElemString.replace("<para>", "").replace("</para>", "").strip()
                  
#                  if not paraElemString.startswith("<bold>"+nameText):
#                    initElemString =  ET.tostring(initElem, encoding='utf8').decode('utf8')
#                    initElemString = initElemString.replace("<?xml version='1.0' encoding='utf8'?>","")
#                    initElemString = initElemString.replace("<initializer>", "").replace("</initializer>", "").strip()
#                    paraElemString = "<para><bold>"+nameText+" "+initElemString+"</bold><linebreak/>"+paraElemString+"</para>"
#                  else:
#                    paraElemString = "<para>"+paraElemString+"</para>"
                
#                  print(paraElemString);
#                  briefDescElem.remove(paraElem)
#                  briefDescElem.append(ET.fromstring(paraElemString))

              if 'ulink' == elem.tag: 
                if elem.attrib['url']!= None:
#                  print(elem.attrib['url'])  
                  linkurl = elem.attrib["url"];
                  linkurlval = ''
                  if not (linkurl.startswith("http") or linkurl.startswith("www")):
                    if linkurl.endswith(".pdf") or linkurl.endswith(".txt") or linkurl.endswith(".py") or linkurl.endswith(".h"): 
                      linkurlvalarray = linkurl.split('/')
                      linkurlval = linkurlvalarray[len(linkurlvalarray)-1]
                      linkPath = filePath.replace("xml/", "")
                      linkPathArray = linkPath.split('/')
                      linkPath = "_static/file/"+linkPath+linkurlval
                      for cnt in linkPathArray:
                        if cnt!=None and len(cnt.strip())>0:
                          linkPath = "../"+linkPath
                      
                      
                      elem.attrib["url"] = linkPath
                  
                  ulinkArray.append('<ulink url="'+elem.attrib["url"]+'">')

              if ((elem.tag).startswith("sect") and not (elem.tag).startswith('section')): 
                if elem.attrib['id']!= None:
                  elem.attrib.pop('id')
                
                elemchild = elem.find("title")
                if (elem.tag=='sect1'):
                  elemchild = elem.find("title")
                  text=elemchild.text
                  elemchild.text=""
                  heading = ET.SubElement(elemchild,'heading')
                  heading.text = text
                  heading.set('level','1')
                  elemchild.tag = elemchild.tag.replace('title', 'para')
                  
                else:
                  text=elemchild.text
                  elemchild.text=""
                  heading = ET.SubElement(elemchild,'bold')
                  heading.text = text
                  elemchild.tag = elemchild.tag.replace('title', 'para')

                elem.tag = elem.tag.replace(elem.tag,'removesec')

            except AttributeError:
              pass
              
#          print("before write")
          tree.write(tempfilename, encoding="utf-8")

        if path.exists(tempfilename):
          roottext=''    
          with open(tempfilename, encoding='UTF-8') as file:
            tree = ET.parse(file)
            root = tree.getroot()
            
            xmlstr = ET.tostring(root, encoding='utf8').decode('utf8')
            roottext = xmlstr.replace('<removesec>','').replace('</removesec>','')
            roottext = roottext.replace('<removeimage>','').replace('</removeimage>','').replace('<removeimage />','').replace('<removeimage/>','')
            for ulink in ulinkArray: 
              roottext = roottext.replace(ulink+"<bold>",ulink)

            roottext = roottext.replace('</bold></ulink>','</ulink>').replace('</bold> </ulink>','</ulink>').replace('</bold>\n</ulink>','</ulink>')
            roottext = roottext.replace('<computeroutput>','').replace('</computeroutput>','')
            roottext = roottext.replace('<ndash/>','-')
#            roottext = roottext.replace('<para><heading level="1">','<title>', 1).replace('</heading></para>','</title>', 1)
#            roottext = roottext.replace('<parahruler>','<para>').replace('</parahruler>','</para><hruler/>')

#          print(roottext)
        
          tree = ET.ElementTree(ET.fromstring(roottext))
          root = tree.getroot()
          
          
          for headingElem in root.iter('heading'):
            headingVal = int(headingElem.attrib['level'])
            if headingVal>2:
              headingElem.tag = headingElem.tag.replace(headingElem.tag,'bold') 
              headingElem.attrib.pop('level')
          
          for simSctElem in root.iter('simplesect'):
            if len(simSctElem.items()) > 0 and simSctElem.attrib['kind']!=None and simSctElem.attrib['kind'] in totalDirectiveList:
              admDirVal = simSctElem.attrib['kind']
              simSctElem.attrib.pop('kind')
              for elemchild in simSctElem.iter():
                if elemchild.tag  in htmlNamesForXml:
                  elemchild.tag = elemchild.tag.replace(elemchild.tag,htmlNamesForXml[elemchild.tag]) 
#                  print(elemchild.items());    
                  for (attrname1, attval1) in elemchild.items():
                    if attrname1=='url':
                      elemchild.set('href',attval1)
                         
                    if attrname1=='refid': 
                      if path.exists(filePath+attval1+".xml"):
                        elemchild.set('href',attval1+'.html#')
                      else:
                        attval1.split('_')
                        x = attval1.split('_')
                        arr=[] 
                        count=0 
                        for val in x: 
                          if count<(len(x)-1):
                            arr.append(val) 
                          count=count+1 
                           
                        str1='_'.join(arr)
                        if path.exists(filePath+str1+".xml"):
                          elemchild.set('href',str1+'.html#'+attval1)
                        else:
                          elemchild.set('href','#'+attval1)
                        
                    elemchild.attrib.pop(attrname1)
                
                elif elemchild.tag=='programlisting':
                  elemchild.set('class','highlight-default notranslate')
                  elemchild.tag = elemchild.tag.replace(elemchild.tag,'div') 
                  
                elif elemchild.tag=='codeline':
                  elemchild.set('class','highlight')
                  elemchild.tag = elemchild.tag.replace(elemchild.tag,'div')

                elif elemchild.tag=='highlight':
                  elemchild.attrib.pop('class')
                  elemchild.tag = elemchild.tag.replace(elemchild.tag,'pre')
                  
                elif elemchild.tag=='sp':
                  elemchild.tag = elemchild.tag.replace(elemchild.tag,'span')
                    
              simplesectString =  ET.tostring(simSctElem, encoding='utf8').decode('utf8')
              simplesectString = simplesectString.replace("<?xml version='1.0' encoding='utf8'?>","")
              
              if admDirVal=='pre':
                simplesectString = simplesectString.replace('<simplesect>','<div class="admonition-precondition admonition"><p class="admonition-title"><span>Precondition</span></p><p>').replace('</simplesect>','</p></div>')
              else:
                simplesectString = simplesectString.replace('<simplesect>','<div class="admonition '+admDirVal+'"><p class="admonition-title">'+admDirVal+'</p><p>').replace('</simplesect>','</p></div>')
                
              simplesectString = simplesectString.replace('\n','')
              simplesectString = 'embed:rst \n.. raw:: html\n\n  '+simplesectString
           
              simSctElem.clear()
              simSctElem.text=simplesectString
              simSctElem.tag = simSctElem.tag.replace('simplesect','verbatim')
              
            elif len(simSctElem.items()) > 0 and simSctElem.attrib['kind']!=None:
              simTitVal = simSctElem.attrib['kind']
              if simTitVal=='par':
                for simParaElem in simSctElem.iter('para'):
                  simParaElemStr =  ET.tostring(simParaElem, encoding='utf8').decode('utf8')
                  simParaElemStr = simParaElemStr.replace("<?xml version='1.0' encoding='utf8'?>","") 
                  isParachanged=False
                  if '<heading level="1">' in simParaElemStr :
                    simParaElemStr = simParaElemStr.replace('<para><heading level="1">','').replace('</heading></para>','')
                    isParachanged=True
                  if '<para><bold>' in simParaElemStr :
                    simParaElemStr = simParaElemStr.replace('<para><bold>','').replace('</bold></para>','')
                    isParachanged=True
                    
                  if isParachanged :
                    simParaElem.tag = simParaElem.tag.replace('para','title') 
                    simParaElem.clear()
                    simParaElem.text=simParaElemStr
           
          for tableElem in root.iter('table'):
#            print(tableElem.items())
            for (attrname, attval) in tableElem.items():
#              print(attrname)
              tableElem.attrib.pop(attrname)
            for rowElem in tableElem.iter():
              if rowElem.tag  in htmlNamesForXml:
                rowElem.tag = rowElem.tag.replace(rowElem.tag,htmlNamesForXml[rowElem.tag]) 
                
                for (attrname1, attval1) in rowElem.items():
                  if attrname1=='thead' and attval1.lower()=='yes':
                    rowElem.set('class','head')
                        
                  if attrname1=='url':
                    rowElem.set('href',attval1)

                  if attrname1=='name' and rowElem.tag=='img':
                    imagePath = filePath.replace("xml/", "")
                    imagePathArray = imagePath.split('/')
                    imagePath = "_static/image/"+imagePath+attval1
                    for cnt in imagePathArray:
                      if cnt!= None and len(cnt.strip())>0:
                        imagePath = "../"+imagePath


                    rowElem.set('src',imagePath)
                    rowElem.set('alt',attval1)
                    rowElem.set('height','100%')
                    rowElem.text='helloimage'
                  
                  if attrname1=='refid': 
                    if path.exists(filePath+attval1+".xml"):
                        rowElem.set('href',attval1+'.html#')
                    else:
                      attval1.split('_')
                      x = attval1.split('_')
                      arr=[] 
                      count=0 
                      for val in x: 
                        if count<(len(x)-1):
                          arr.append(val) 
                        count=count+1 
                           
                      str1='_'.join(arr)
                      if path.exists(filePath+str1+".xml"):
                        rowElem.set('href',str1+'.html#'+attval1)
                      else:
                        rowElem.set('href','#'+attval1)
                      
                  if attrname1!='rowspan' and attrname1!='colspan': 
                    rowElem.attrib.pop(attrname1)
              
              elif rowElem.tag=='programlisting':
                rowElem.tag = rowElem.tag.replace(rowElem.tag,'div')
                rowElem.set('class','highlight-default notranslate')
                  
              elif rowElem.tag=='codeline':
                rowElem.tag = rowElem.tag.replace(rowElem.tag,'div')
                rowElem.set('class','highlight')

              elif rowElem.tag=='highlight':
                rowElem.attrib.pop('class')
                rowElem.tag = rowElem.tag.replace(rowElem.tag,'pre')
                  
              elif rowElem.tag=='sp':
                rowElem.tag = rowElem.tag.replace(rowElem.tag,'span')
              
            tablestr =  ET.tostring(tableElem, encoding='utf8').decode('utf8')
            tablestr = tablestr.replace("<?xml version='1.0' encoding='utf8'?>","") 
            tablestr = tablestr.replace('<table>','<table class="docutils align-default">')
            tablestr = tablestr.replace('\n','')
            tablestr = tablestr.replace('<td><p><img','<td width="25%"><img').replace('helloimage</img></p></td>', '</td>').replace('helloimage</img>   </p></td>', '</td>')
#            tablestr = tablestr.replace('<','\&lt;').replace('>','\&gt;')
            tablestr="embed:rst \n.. raw:: html\n\n  "+tablestr
        
            tableElem.tag = tableElem.tag.replace('table','verbatim') 
            tableElem.clear()
            tableElem.text=tablestr

          tree.write(fileName, encoding="utf-8")
          os.remove(tempfilename)
        
#      print("END Loop")
